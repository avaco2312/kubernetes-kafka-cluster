apiVersion: v1
kind: Namespace
metadata:
  name: kafka
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
  namespace: kafka
spec:
  selector:
    app: zookeeper
  ports:
  - port: 2181
    protocol: TCP
  clusterIP: None
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zookeeper
  namespace: kafka
spec:
  selector:
    matchLabels:
      app: zookeeper 
  serviceName: zookeeper
  replicas: 1 
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      volumes:
      - name: vdata
        hostPath:
          path: /vdata      
      containers:
      - name: zookeeper
        image: bitnami/zookeeper
        imagePullPolicy: Never
        volumeMounts:
        - name: vdata
          mountPath: /bitnami/zookeeper
          subPathExpr: $(POD_NAME)           
        ports:
        - containerPort: 2181
        resources:
            limits:
              cpu: 200m
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 200Mi 
        env:  
        - name: ALLOW_ANONYMOUS_LOGIN
          value: "yes" 
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name            
---
apiVersion: v1
kind: Service
metadata:
  name: kafka
  namespace: kafka
spec:
  selector:
    app: kafka
  ports:
  - name: kafka
    port: 9092
    protocol: TCP
  clusterIP: None
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: kafka
spec:
  selector:
    matchLabels:
      app: kafka 
  serviceName: kafka
  replicas: 3 
  template:
    metadata:
      labels:
        app: kafka
    spec:
      volumes:
      - name: vdata
        hostPath:
          path: /vdata        
      containers:
      - name: kafka
        image: bitnami/kafka
        imagePullPolicy: Never
        volumeMounts:
        - name: vdata
          mountPath: /bitnami/kafka
          subPathExpr: $(POD_NAME)            
        ports:
        - containerPort: 9092
        resources:
            limits:
              cpu: 200m
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 200Mi        
        env:
        - name: ALLOW_PLAINTEXT_LISTENER
          value: "yes"
        - name: KAFKA_CFG_ZOOKEEPER_CONNECT
          value: zookeeper:2181
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name            
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name:  go-producer
  namespace: kafka
  labels:
    app:  go-producer
spec:
  selector:
    matchLabels:
      app: go-producer
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app:  go-producer
    spec:
      containers:
      - name:  go-producer
        image:  go-producer
        imagePullPolicy: Never
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
          limits:
            cpu: 100m
            memory: 100Mi
        env:
        - name: KAFKAURL
          value: kafka:9092    
        ports:
        - containerPort:  8070
          name:  http
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: go-producer
  namespace: kafka
spec:
  selector:
    app: go-producer
  type: ClusterIP
  sessionAffinity: None
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800
  ports:
    - name: go-producer
      protocol: TCP
      port: 8070
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name:  go-consumer
  namespace: kafka
  labels:
    app:  go-consumer
spec:
  selector:
    matchLabels:
      app: go-consumer
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app:  go-consumer
    spec:
      containers:
      - name:  go-consumer
        image:  go-consumer
        imagePullPolicy: Never
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
          limits:
            cpu: 100m
            memory: 100Mi
        env:
        - name: KAFKAURL
          value: kafka:9092
        ports:
        - containerPort:  8072
          name:  http
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: go-consumer
  namespace: kafka
spec:
  selector:
    app: go-consumer
  type: ClusterIP
  sessionAffinity: None
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800
  ports:
    - name: go-consumer
      protocol: TCP
      port: 8072
